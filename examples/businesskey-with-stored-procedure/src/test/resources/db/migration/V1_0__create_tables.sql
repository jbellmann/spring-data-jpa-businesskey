CREATE SCHEMA IF NOT EXISTS example_data;

CREATE TYPE example_data.number_range_type AS ENUM (
  'EXAMPLE_ORDER'
);

CREATE TABLE example_data.number_range (
  nr_type      example_data.number_range_type  NOT NULL  PRIMARY KEY,
  nr_seq_name  text                        NOT NULL,
  nr_prefix    text,
  nr_length    smallint
);

CREATE OR REPLACE FUNCTION example_data.get_next_number (
  p_type  example_data.number_range_type
) RETURNS text AS
  $BODY$
-- $Id$
-- $HeadURL$
DECLARE
    l_number  text;
    l_prefix  text;
    l_length  smallint;
BEGIN

    SELECT to_char(nextval('example_data.' || nr_seq_name), 'FM9999999999'),
           COALESCE(nr_prefix, ''),
           nr_length
      INTO l_number,
           l_prefix,
           l_length
      FROM example_data.number_range
     WHERE nr_type = p_type;

    IF l_number IS NULL THEN
        RAISE EXCEPTION 'Configuration not found for number range type %', p_type;
    END IF;

    IF l_length IS NOT NULL AND length(l_number) > l_length THEN
        RAISE EXCEPTION 'Number of type % out of bounds. Maximum number of digits: %', p_type, l_length;

    END IF;

    RETURN  l_prefix || lpad(l_number, l_length, '0');

END;
$BODY$
LANGUAGE 'plpgsql'
VOLATILE SECURITY DEFINER;

CREATE SEQUENCE example_data.example_order_number_seq MAXVALUE 9999999;

INSERT INTO example_data.number_range (nr_type, nr_seq_name, nr_prefix, nr_length)
     VALUES ('EXAMPLE_ORDER', 'example_order_number_seq', 'EO', 7);

--
--

create table example_data.product (
    id int8 not null,
    business_key varchar(255),
    name varchar(255),
    primary key (id)
);

create sequence hibernate_sequence;

--
-- generated by EclipseLink
--
/**
CREATE TABLE example_data.product (
    ID BIGINT NOT NULL,
    BUSINESSKEY VARCHAR(255),
    NAME VARCHAR(255),
    PRIMARY KEY (ID)
);

CREATE TABLE SEQUENCE (
    SEQ_NAME VARCHAR(50) NOT NULL,
    SEQ_COUNT DECIMAL(38),
    PRIMARY KEY (SEQ_NAME)
);
INSERT INTO SEQUENCE(SEQ_NAME, SEQ_COUNT) values ('SEQ_GEN', 0);
**/